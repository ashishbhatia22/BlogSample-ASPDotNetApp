Steps

1.) App Setup and Instrumentation


Download the sample app and inspect the code.

In the project the following nuget packages are installed to instrument the app.
The first two are required for OpenTelemetry to function. 

dotnet add package OpenTelemetry
dotnet add package OpenTelemetry.Extensions.Hosting

The following packages are instrumentation libraries that automatically generate traces and spans when you application makes
calls to resources through http or sql requests.

dotnet add package OpenTelemetry.Instrumentation.AspNetCore --prerelease
dotnet add package OpenTelemetry.Instrumentation.Http --prerelease
dotnet add package OpenTelemetry.Instrumentation.SqlClient --prerelease

Note: Some of the packages are in a prerelease state as the standards for the attribute names are
not currently stable. The functionality is stable but the names of the attributes are subject to change.


Next, these packages format traces for AWS XRay to consume.

dotnet add package OpenTelemetry.Contrib.Extensions.AWSXRay
dotnet add package OpenTelemetry.Instrumentation.AWS

1. Deploy the cloudformation template. This well deploy the following resources..
    -- A vpc with 2 availbility zones with a public and private subnet in each.
    -- A load balancer with a ip type target group.
    -- A ECS cluster with 1 EC2 instance node based on linux.
    -- A cloudmap Namcespace to easily connect services on your cluster
    -- 2 ECR repositories for pushing your application and custom adot images.
    -- An RDS Database based on MS Sql Express
    -- Amazon Opensearch Cluster to send logs.
    -- Amazon Managed Prometheus to send metrics.
   
aws cloudformation deploy --template ./blog-cf-template.yml --stack-name blog-cf-test-30 --capabilities CAPABILITY_NAMED_IAM

2. Create custom ADOT image and push to ECR

    -- Update the prometheusremotewrite endpoint in the adot-config.yaml file with your Amazon Managed Prometheus endpoint that
        output found in the CloudFormation Stack

    -- Go to your ECR Repository that was created in the cloudformation template and follow the build commands to push your image
       to the blog-adot-custom repository so ECS can pull the image when deploying the container on your cluster.

3. Update the application's connection string to the rds endpoint and set the username and password.

    -- the endpoint can be found in the CloudFormation stack
    -- username = admin
    -- password = Password123!
       

4. Build application image and upload to ECR using the upload commands found in the repository.

5. Update and register and deploy your adot task defintion.

    -- open up adot.json under GadgetsOnline/BlogResources/task-definitions/final Set your image to your ecr repository images.
    -- Update the ecsTaskRole and ecsTaskExecutionRole with the respective arns from the cloudwatch output.
    -- Run the following command using the ecs cli to registier the adot test definition

        aws ecs register-task-definition --cli-input-json file://adot-task-definition.json --region us-east-1

6. Updated and deploy your ECS Service.
    -- Add the private subnets from the cloudformation output to the service-connect-adot.json
    -- Add the default security group to your service and the AdotService Security group to your service.
    -- Run the following command to launch your service.

  aws ecs create-service --cluster BlogCluster --cli-input-json file://adot-service.json


 7. Register App Task Definition

     aws ecs register-task-definition --cli-input-json file://gadgets-online-firelens-task-definition.json --region us-east-1

7. Launch the application service b runnin the following command.

   aws ecs create-service --cluster BlogCluster --cli-input-json file://gadgets-online-service.json






6. Run task
aws ecs run-task --cluster blog-cluster --task-definition gadgets-online:9 --count 1 --region us-east-1

docker run -p 8000:8000 -e OTEL_EXPORTER_OTLP_ENDPOINT=http://adot:4317 566752651623.dkr.ecr.us-east-1.amazonaws.com/gadgets-online 


Configure Permisisons in Opensearch Cluster

Log in as Admin. 

Go to roles, For this demo, we will go to all_access and map our IAM Task Role to give it access post logs.


aws ecs create-service \
    --cluster blog-cluster \
    --service-name entire-solution \
    --task-definition entire-solution:2 \
    --launch-type EC2 \
    --scheduling-strategy DAEMON \
    --region us-east-1